import sys
import os
import subprocess
import argparse
import time

__version__ = "1.0.0"


# Define valid video file extensions
valid_extensions = ["mp4", "mkv", "avi", "mov", "flv", "wmv"]

# Initialize argparse to handle command line arguments
parser = argparse.ArgumentParser(description=f'Process video files to generate subtitles. Version: {__version__}')
parser.add_argument('--ext', default='mkv', help='Video file extension to process (default: mkv)')
parser.add_argument('--model', default='large-v2', help='Whisper model to use')
parser.add_argument('--language', required=True, help='Language for the subtitles')
parser.add_argument('--mac', help='Use this flag to run the script on a Mac', action=argparse.BooleanOptionalAction)
parser.add_argument('--threads', default=0, type=int, help='Number of threads to use for processing (default: 4)')

args = parser.parse_args()
model = args.model
language = args.language
file_extension = args.ext.lower().strip('.')


def validate_file_extension():
    # Validate file extension
    if file_extension not in valid_extensions:
        print(f"Invalid file extension. Valid extensions are: {', '.join(valid_extensions)}")
        sys.exit(1)



def process_video_file(video_file, dirpath, bn, model, language, mac, threads):
    try:
        start_time = time.time()

        # Extract audio from the original video file
        subprocess.run(["ffmpeg", "-i", f"{dirpath}/{video_file}", "-map", "0:a:0", f"{dirpath}/{bn}.wav"], check=True)
        
        # Use Whisper to generate subtitles
        whisper_command = ["whisperx", "--print_progress", "True", "--output_format", "srt", "--model", model, "--language", language, '--output_dir', dirpath]
        if mac:
            whisper_command = [*whisper_command, *['--compute_type', 'int8']]
        if threads:
            whisper_command = [*whisper_command, *['--threads', str(threads)]]
        whisper_command = [*whisper_command, *[f"{dirpath}/{bn}.wav"]]
        subprocess.run(whisper_command, check=True)  
        end_time = time.time()        
        
        print(f"Processed {video_file} successfully in {end_time - start_time} seconds")
    except subprocess.CalledProcessError as e:
        print(f"Error processing {video_file}: {e}")


def process_files(video_file, dirpath):
    if not video_file.endswith(f".{file_extension}"):
        print(f"Skipping {video_file} because it's not a {file_extension} file")
        return

    file_without_extension = os.path.splitext(video_file)[0]
    out = os.path.join(dirpath, f"{file_without_extension}.srt")

    if os.path.exists(out):
        print(f"Subtitles already exist {out}")
        return

    process_video_file(video_file, dirpath, file_without_extension, model, language, args.mac, args.threads)

    # Delete the audio file and any other files generated by Whisper
    for file in os.listdir(dirpath):
        if file.startswith(file_without_extension) and not (file.endswith(file_extension) or file.endswith('.srt')):
            os.remove(file)


def main():
    validate_file_extension()

    # Get the current working directory
    current_directory = os.getcwd()

    # Process video files with the specified file extension
    for dirpath, _, files in os.walk(current_directory):
        for video_file in files:
            process_files(video_file, dirpath)

